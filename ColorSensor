//import a lot of different functions, methods and commands for the ftc hardware
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.GyroSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotorController;
import android.media.MediaPlayer;
import android.graphics.Color;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DeviceInterfaceModule;

public class ColorSensor extends LinearOpMode
{
	ColorSensor colorSensor;
	DeviceInterfaceModule = CDI;
	
	public static void main(String[]args)
	{

System.out.println(runOpMode);
	}
	public void loop(String color) throws InterruptedException 
	{
		colorSensor = hardwareMap.colorSensor.get(“color”);
		CDI = hardwareMap.deviceInterfaceModule.get(“Device Interface Module 1”);
		
		boolean LEDState = true;
		colorSensor.enableLed(LEDState);
	
		float hsvValues[] = [0, 0, 0];
		
		String color = "";

		Color.RGBToHSV(colorSensor.red() * 8, colorSensor.green() * 8, colorSensor.blue() * 8, hsvValues);

		//telemetry.addData(“2 Clear”, colorSensor.alpha());
		telemetry.addData(“3 Red”, colorSensor.red());
		telemetry.addData(“5 Blue”, colorSensor.blue());
		telemetry.addData(“6 Hue”, hsvValues[0]);
		telemetry.addData("Start", "Start");
		if (colorSensor.red() > colorSensor.blue())
		{
			color = red;
			telemetr.addData("red");
			return color;

		}
		else if (colorSensor.blue() > colorSensor.red())
		{
			color = blue;
			telemetry.addData("blue");
			return color;

		}
		else
		{
			color = unknown;
			telemetry.addData("unknown");
			return color;
		}
	}
}


