package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

/**
 * This is NOT an opmode.
 *
 * This class can be used to define all the specific hardware for a single robot.
 * In this case that robot is a Pushbot.
 * See PushbotTeleopTank_Iterative and others classes starting with "Pushbot" for usage examples.
 *
 * This hardware class assumes the following device names have been configured on the robot:
 * Note:  All names are lower case and some have single spaces between words.
 *
 */
public class HardwareMecanumPushbot
{
    DcMotor parker, louis, maria, matthew, toby, eric, chris;

    /* Public OpMode members. */


    /* local OpMode members. */
    HardwareMap hwMap           =  null;
    private ElapsedTime period  = new ElapsedTime();

    /* Constructor */
    public HardwareMecanumPushbot(){

    }

    /* Initialize standard Hardware interfaces */
    public void init(HardwareMap ahwMap) {
        // Save reference to Hardware map
        hwMap = ahwMap;

        // Define and Initialize Motors
        parker = hwMap.dcMotor.get("frontLeft");
        louis = hwMap.dcMotor.get("frontRight");
        maria = hwMap.dcMotor.get("rearLeft");
        matthew = hwMap.dcMotor.get("rearRight");
        toby = hwMap.dcMotor.get("buttonPusher");

        parker.setDirection(DcMotor.Direction.REVERSE);
        maria.setDirection(DcMotor.Direction.REVERSE);


        // Set all motors to zero power
        parker.setPower(0);
        louis.setPower(0);
        maria.setPower(0);
        matthew.setPower(0);
        toby.setPower(0);

        // Set all motors to run without encoders.
        // May want to use RUN_USING_ENCODERS if encoders are installed.
        parker.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        louis.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        maria.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        matthew.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        toby.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        // Define and initialize ALL installed servos.

    }

    /***
     *
     * waitForTick implements a periodic delay. However, this acts like a metronome with a regular
     * periodic tick.  This is used to compensate for varying processing times for each cycle.
     * The function looks at the elapsed cycle time, and sleeps for the remaining time interval.
     *
     * @param periodMs  Length of wait cycle in mSec.
     * @throws InterruptedException
     */
    public void waitForTick(long periodMs) throws InterruptedException {

        long  remaining = periodMs - (long)period.milliseconds();

        // sleep for the remaining portion of the regular cycle period.
        if (remaining > 0)
            Thread.sleep(remaining);

        // Reset the cycle clock for the next pass.
        period.reset();
    }
}

