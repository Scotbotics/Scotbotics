package org.firstinspires.ftc.teamcode;

//Last Edited 9/17/17

import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

//GO FORWARD AND TURN LEFT AND THEN FORWARD, THEN TURN RIGHT AND GO FORWARD AGAIN AFTER KNOCKING THE JEWEL

//      ^
//      |
//      |
//      |

@Autonomous(name="BLUE_1_Autonomous", group="Autononmous")

public class BLUE_1_Autonomous extends LinearOpMode {

    private ElapsedTime runtime = new ElapsedTime();

    static final int KNOCK_JEWEL = 1;
    static final int SERVO_DOWN = 0;
    static final int DRIVE_TO_BOX = 2;
    static final int STOPROBOT = 4;
    static final int DRIVE_TO_BOX2 = 3;



    int state = SERVO_DOWN;
    View relativeLayout;

    Servo El_Diablo;
    Servo Final_Pusher;
    Servo Right_Collector;
    Servo Left_Collector;
    Servo Klaw;

    Servo jewel_knocker;
    ColorSensor colorSensor;
    DcMotor leftDrive;
    DcMotor rightDrive;
    float hsvValues[] = {0F, 0F, 0F};
    double hold = 0.5;
    double turn = 0.3;
    boolean LEDState = true;

    final float values[] = hsvValues;

    @Override
    public void runOpMode() {


        telemetry.update();
        colorSensor = hardwareMap.colorSensor.get("sensor_color");
        jewel_knocker = hardwareMap.servo.get("jewel_knocker");
        rightDrive = hardwareMap.dcMotor.get("rightDrive"); //right motor
        leftDrive =  hardwareMap.dcMotor.get("leftDrive");

        El_Diablo       = hardwareMap.servo.get("el_diablo");
        Final_Pusher    = hardwareMap.servo.get("final_push");
        Klaw            = hardwareMap.servo.get("claw");
        Right_Collector = hardwareMap.servo.get("right_collector");
        Left_Collector  = hardwareMap.servo.get("left_collector");

        colorSensor.enableLed(LEDState);
        waitForStart();
        while (opModeIsActive()) {

            El_Diablo.setPosition(0.5);
            Klaw.setPosition(0.5);
            Left_Collector.setPosition(0.5);
            Right_Collector.setPosition(0.5);
            Final_Pusher.setPosition(0.5);

            switch (state) {
                case SERVO_DOWN:
                    servo_down();
                    break;
                case KNOCK_JEWEL:
                    knock_jewel();
                    break;
                case DRIVE_TO_BOX:
                    drive_to_box();
                    break;
                case DRIVE_TO_BOX2:
                    drive_to_box2();
                    break;
                case STOPROBOT:
                    stoprobot();
                    break;

            }

        }
    }

    public void servo_down() {

        runtime.reset();

        while(runtime.milliseconds() <900) {

            jewel_knocker.setPosition(0);
            telemetry.addLine("jewel_knocker dropping");
            telemetry.update();
        }

        jewel_knocker.setPosition(0.5);
        telemetry.addLine("jewel_knocker stopped");
        telemetry.update();
        sleep(1000);
        state = KNOCK_JEWEL;

    }

    public void knock_jewel() {
        telemetry.addLine("Color being scanned");
        telemetry.update();
        Color.RGBToHSV(colorSensor.red() * 8, colorSensor.green() * 8, colorSensor.blue() * 8, hsvValues);

        //    relativeLayout.post(new Runnable() {
        //   public void run() {
        //    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));
        //   }
        //   });

        //   telemetry.update();
        sleep(1000);
        if (colorSensor.blue() > colorSensor.red()) {

            telemetry.addLine("Color blue scanned");
            telemetry.update();

            turn_left(100);
            sleep(100);

            jewel_knocker.setPosition(1);
            sleep(200);

            runtime.reset();

            turn_right(100);
            sleep(100);

            state = DRIVE_TO_BOX2;
        }
        else {

            telemetry.addLine("Color red scanned");
            telemetry.update();

            turn_right(100);
            sleep(100);

            jewel_knocker.setPosition(1);
            sleep(200);

            runtime.reset();

            turn_left(300);
            sleep(300);

            state = DRIVE_TO_BOX;

        }


        stop_drive(100);
        sleep(1000);
        state = DRIVE_TO_BOX;

    }

    public void drive_to_box() {

        drive_backward(200);
        sleep(200);
        stop_drive(200);
        telemetry.addLine("Driving Forward");
        telemetry.update();


        turn_right(400);
        sleep(400);
        telemetry.addLine("turn");
        telemetry.update();

        drive_backward(1200);
        sleep(1200);
        stop_drive(200);
        telemetry.addLine("Driving Forward");
        telemetry.update();

        state = STOPROBOT;

    }

    public void drive_to_box2() {

        drive_backward(200);
        sleep(200);
        stop_drive(200);
        telemetry.addLine("Driving Forward");
        telemetry.update();


        turn_right(1500);
        sleep(1500);
        telemetry.addLine("turn");
        telemetry.update();

        drive_backward(1200);
        sleep(1200);
        stop_drive(200);
        telemetry.addLine("Driving Forward");
        telemetry.update();

        state = STOPROBOT;
    }


    public void stoprobot() {

        stop_drive(1000000000);

        sleep(1000000000);

    }

    void drive_backward(double time) {
        leftDrive.setPower(hold);
        rightDrive.setPower(hold);
    }

    void drive_forward(double time) {
        leftDrive.setPower(-hold);
        rightDrive.setPower(-hold);
    }

    void turn_left(double time) {
        leftDrive.setPower(turn);
        rightDrive.setPower(-turn);
    }

    void turn_right(double time) {
        leftDrive.setPower(-turn);
        rightDrive.setPower(turn);
    }

    void stop_drive(double time) {
        leftDrive.setPower(0.0);
        rightDrive.setPower(0.0);
    }
}


