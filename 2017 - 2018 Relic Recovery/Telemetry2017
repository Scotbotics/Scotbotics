/**
 * Created by Sam on 9/23/2017.
 */

package org.firstinspires.ftc.teamcode;

//Last Edited 11/19/17

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorController;
import com.qualcomm.robotcore.hardware.Servo;
import android.media.MediaPlayer;
import android.media. MediaPlayer;
import com.qualcomm.robotcore.util.ElapsedTime;


@TeleOp(name = "Telemetry2017", group = "TeleOp")

public class Telemetry2017 extends OpMode {
    DcMotor Right;
    DcMotor Left;
    DcMotor Climber;

    Servo El_Diablo;
    Servo Final_Pusher;
    Servo Klaw;
    Servo Jewel_Knocker;

    float rightJoystickVal_Cont1;
    float leftJoystickVal_Cont1;

    float RightJoystickVal_Cont2;
    float LeftJoystickVal_Cont2;

    MediaPlayer ScotlandTheBrave, HowCouldThisHappen, TheSoundOfSilence, EyeOfTheTiger, RockyTheme;

    public void init() {
        //tells everything to start at what power
        Right = hardwareMap.dcMotor.get("rightDrive"); //right motor
        Left =  hardwareMap.dcMotor.get("leftDrive"); //left
        Climber = hardwareMap.dcMotor.get("climber");

        //servos for robot
        El_Diablo = hardwareMap.servo.get("el_diablo");
        El_Diablo = hardwareMap.servo.get("final_push");
        El_Diablo = hardwareMap.servo.get("jewel_knocker");
        Klaw = hardwareMap.servo.get("klaw");

        Right.setDirection(DcMotor.Direction.REVERSE); //Tells the motors to be different, so we can drive
        Climber.setDirection(DcMotor.Direction.REVERSE); //Tells the motors to be different, so the climber makes reasonable sense

        //Set up the five songs we currently have
        HowCouldThisHappen = MediaPlayer.create(hardwareMap.appContext, R.raw.howcouldthishappen);
        ScotlandTheBrave = MediaPlayer.create(hardwareMap.appContext, R.raw.scotlandthebrave);
        TheSoundOfSilence = MediaPlayer.create(hardwareMap.appContext, R.raw.thesoundofsilence);
        EyeOfTheTiger = MediaPlayer.create(hardwareMap.appContext, R.raw.eyeofthetiger);
        RockyTheme = MediaPlayer.create(hardwareMap.appContext, R.raw.rockytheme);

        telemetry.addData(">", "Robot Initialized" );
        telemetry.update();
    }
    public void loop() {
        //Has the drive and servos loop
        rightJoystickVal_Cont1 = gamepad1.right_stick_y;
        leftJoystickVal_Cont1 = gamepad1.left_stick_y;
        Right.setPower(rightJoystickVal_Cont1/2);
        Left.setPower(leftJoystickVal_Cont1/2);
        telemetry.addData("right motor power", rightJoystickVal_Cont1 );
        telemetry.addData("left motor power", leftJoystickVal_Cont1 );


        //Sets power for the climber, controlled by the functions controller right joy stick
        RightJoystickVal_Cont2 = gamepad2.right_stick_y;
        Climber.setPower(RightJoystickVal_Cont2);
        telemetry.addData("climber power", RightJoystickVal_Cont2 );


        //servos don't use power, go to a position
        //continous .5 is neutral, 1 is forward, 0 is backwards
        //continous servo

        //Arm Extension (El_Diablo) is powered by this control system
        //if you hit the up arrow on functions controller, then El_Diablo Extends, hit down it retracts and neutral keeps it still
        if(gamepad2.dpad_up) {
            El_Diablo.setPosition(1.0);
            telemetry.addData(">", "El_Diablo Extending" );
            telemetry.update();
        } else if(gamepad2.dpad_down) {
            El_Diablo.setPosition(0);
            telemetry.addData(">", "El_Diablo Retracting" );
            telemetry.update();
        } else if(gamepad2.dpad_right || gamepad2.dpad_left){
            El_Diablo.setPosition(0.5);
            telemetry.addData(">", "El_Diablo Stopped" );
            telemetry.update();
        }

        //Final Pusher control sequence. If you push up, the servo goes up, if you push down the servo goes down
        LeftJoystickVal_Cont2 = gamepad2.left_stick_y;
        if(LeftJoystickVal_Cont2 > 1) {
            Final_Pusher.setPosition(1);
            telemetry.addData(">", "Final Pusher Up" );
            telemetry.update();
        } else if(LeftJoystickVal_Cont2 < 1) {
            Final_Pusher.setPosition(0);
            telemetry.addData(">", "Final Pusher Down" );
            telemetry.update();
        }
        //Arm Claw (Klaw) runs as following. If you press right bumper on controller two. THen the klaw tightens.
        //Press the left bumper and the klaw loosens
       while(gamepad2.right_bumper == true) {
           Klaw.setPosition(1.0);
           telemetry.addData(">", "Klaw Tightening" );
           telemetry.update();
        }
        while(gamepad2.left_bumper == true) {
            Klaw.setPosition(1.0);
            telemetry.addData(">", "Claw Loosening" );
            telemetry.update();
        }
        //Jewel_Knocker Extension (jewel_knocker) is powered by this control system
        //To bring the jewel knocker down, you hit a on the functions controller. To bring it up you hit y on the controller. b and x stop the controller
        if(gamepad2.a) {
            El_Diablo.setPosition(0);
            telemetry.addData(">", "Jewel Knocker Down" );
            telemetry.update();
        } else if(gamepad2.y) {
            El_Diablo.setPosition(1.0);
            telemetry.addData(">", "Jewel Knocker Up" );
            telemetry.update();
        } else if(gamepad2.x || gamepad2.b){
            El_Diablo.setPosition(0.5);
            telemetry.addData(">", "Jewel Knocker Stopped" );
            telemetry.update();
        }
        //Song system, if you
        if(gamepad1.y) {
            ScotlandTheBrave.start();
            telemetry.addData(">", "Scotland Playing" );
            telemetry.update();
        }
        //If the song is playing, you can stop it
        if(gamepad1.dpad_up) {
            ScotlandTheBrave.stop();
            telemetry.addData(">", "Scotland Stopped" );
            telemetry.update();
        }

        //How to start "How did this happen". Use when losing or everything is breaking
        if(gamepad1.x) {
            HowCouldThisHappen.start();
            telemetry.addData(">", "How Could This Happen Playing" );
            telemetry.update();
        }

        //If the song is playing, you can stop it
        if(gamepad1.dpad_left) {
            HowCouldThisHappen.stop();
            telemetry.addData(">", "How Could This Happened Stopped" );
            telemetry.update();
        }

        //Use when wanting to listen to a good song, or everything is broken
        if(gamepad1.b) {
            TheSoundOfSilence.start();
            telemetry.addData(">", "Sound of Silence Playing" );
            telemetry.update();
        }

        //If the song is playing, you can stop it
        if(gamepad1.dpad_right) {
            TheSoundOfSilence.stop();
            telemetry.addData(">", "Sound of Silence Stopped" );
            telemetry.update();
        }

        if(gamepad1.a) {
            EyeOfTheTiger.start();
            telemetry.addData(">", "Eye Of The Tiger Playing" );
            telemetry.update();
        }
        if(gamepad1.dpad_down) {
            EyeOfTheTiger.stop();
            telemetry.addData(">", "Eye of The Tiger Stopped" );
            telemetry.update();

        }
    }
    public void stop() {
        //tells all power to cut to 0, shouldn't be neccessary
        Right.setPower(0);
        Left.setPower(0);

        Klaw.setPosition(0.5);
        El_Diablo.setPosition(0.5);
        Jewel_Knocker.setPosition(0.5);
        Final_Pusher.setPosition(0.5);

        telemetry.addData(">", "Everything Stopped" );
        telemetry.update();
    }
}
