package org.firstinspires.ftc.teamcode;

//Last Edited 9/17/17

import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

//GO BACKWARDS AND TURN RIGHT AND THEN BACKWARDS AGAIN AFTER KNOCKING THE JEWEL

//      ^
//      |
//      |
//      |

@Autonomous(name="BLUE_2_Autonomous", group="Autononmous")

public class BLUE_2_Autonomous extends LinearOpMode {

    private ElapsedTime runtime = new ElapsedTime();

    static final int KNOCK_JEWEL = 1;
    static final int SERVO_DOWN = 0;
    static final int DRIVE_TO_BOX = 2;





    int state = SERVO_DOWN;
    View relativeLayout;


    Servo jewel_knocker;
    ColorSensor colorSensor;
    DcMotor leftDrive;
    DcMotor RightDrive;
    float hsvValues[] = {0F, 0F, 0F};
    //boolean bPrevState = true;
    //boolean bCurrState = true;
    //boolean bLedOn = true;
    double hold = 0.22;
    boolean LEDState = true;

    final float values[] = hsvValues;

    @Override
    public void runOpMode() {


        telemetry.update();
        colorSensor = hardwareMap.colorSensor.get("sensor_color");
        jewel_knocker = hardwareMap.servo.get("jewel_knocker");
        colorSensor.enableLed(LEDState);
        waitForStart();
        while (opModeIsActive()) {

            switch (state) {
                case SERVO_DOWN:
                    servo_down();
                    break;
                case KNOCK_JEWEL:
                    knock_jewel();
                    break;
                case DRIVE_TO_BOX:
                    drive_to_box();
                    break;
            }

        }
    }

    public void servo_down() {

        runtime.reset();

        while(runtime.milliseconds() <900) {

            jewel_knocker.setPosition(0);
            telemetry.addLine("jewel_knocker dropping");
            telemetry.update();
        }

        jewel_knocker.setPosition(0.5);
        telemetry.addLine("jewel_knocker stopped");
        telemetry.update();
        sleep(1000);
        state = KNOCK_JEWEL;

    }

    public void knock_jewel() {
        telemetry.addLine("Color being scanned");
        telemetry.update();
        Color.RGBToHSV(colorSensor.red() * 8, colorSensor.green() * 8, colorSensor.blue() * 8, hsvValues);

        // send the info back to driver station using telemetry function.
        /** telemetry.addLine("Button Hitting");
         telemetry.addData("LED", bLedOn ? "On" : "Off");
         telemetry.addData("Clear", colorSensor.alpha());
         telemetry.addData("Red  ", colorSensor.red());
         telemetry.addData("Green", colorSensor.green());
         telemetry.addData("Blue ", colorSensor.blue());
         **/
        // change the background color to match the color detected by the RGB sensor.
        // pass a reference to the hue, saturation, and value array as an argument
        // to the HSVToColor method.
        /** relativeLayout.post(new Runnable() {
         public void run() {
         relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));
         }
         });
         **/
        telemetry.update();


        if (colorSensor.blue() > colorSensor.red()) {

            telemetry.addLine("Color blue scanned");
            telemetry.update();

            drive_forward(1000);

            runtime.reset();

            while(runtime.milliseconds() < 500) {

                jewel_knocker.setPosition(1);
            }

            jewel_knocker.setPosition(0.5);
            sleep(10000);

        }
        else {

            telemetry.addLine("Color red scanned");
            telemetry.update();

            drive_backward(1000);

            runtime.reset();

            while(runtime.milliseconds() < 500) {

                jewel_knocker.setPosition(1);
            }

            jewel_knocker.setPosition(0.5);
            sleep(10000);

        }

        state = DRIVE_TO_BOX;

    }

    public void drive_to_box() {

        //GO BACKWARDS AND TURN RIGHT AND THEN BACKWARDS AGAIN AFTER KNOCKING THE JEWEL

        drive_backward(1000);

        turn_right(1000);

        drive_backward(1000);

    }


    void drive_forward(double time) {
        leftDrive.setPower(hold);
        RightDrive.setPower(hold);
    }

    void drive_backward(double time) {
        leftDrive.setPower(-hold);
        RightDrive.setPower(-hold);
    }

    void turn_left(double time) {
        leftDrive.setPower(-hold);
        RightDrive.setPower(hold);
    }

    void turn_right(double time) {
        leftDrive.setPower(hold);
        RightDrive.setPower(-hold);
    }

    void stop_drive(double time) {
        leftDrive.setPower(0.0);
        RightDrive.setPower(0.0);
    }
}



