package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.GyroSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotorController;
import android.os.Handler;
import android.os.SystemClock;
import android.util.Log;
import android.view.ViewParent;

/*
Created by FTCkey and then modified by Sam Orta on 10/1/16
Last edited 10/11/16
 */

public class MechanumFIRST extends OpMode {
    DcMotor parker, louis, maria, matthew, toby, eric, chris;
    Servo mochi;
    public float leftX, leftY, rightX, rightY, fudge;
    public static double deadzone = 0.2;

    //servo minmax
    /*final static double CLAMP_MIN  = 172.0/255.0;
    final static double CLAMP_MID = 220.0/255.0;
    final static double CLAMP_MAX  = 232.0/255.0;
    final static double DUMP_MIN  = 80.0/255.0;
    final static double DUMP_MAX  = 180.0/255.0;
    */
    @Override
    public void init() {

        parker = hardwareMap.dcMotor.get("frontLeft");
        louis = hardwareMap.dcMotor.get("frontRight");
        maria = hardwareMap.dcMotor.get("rearLeft");
        matthew = hardwareMap.dcMotor.get("rearRight");
        toby = hardwareMap.dcMotor.get("buttonPusher");
        //mochi = hardwareMap.servo.get("flagRaiser");
        //eric = hardwareMap.dcMotor.get("catapult");
        //chris = hardwareMap.dcMotor.get("harvester");

        louis.setDirection(DcMotor.Direction.REVERSE);
        matthew.setDirection(DcMotor.Direction.REVERSE);
        //reverses right side, so collector is front
        /*
        flag = hardwareMap.servo.get("flag");
        dump = hardwareMap.servo.get("dump");
        clamp = hardwareMap.servo.get("clamp");
        //dump.setPosition(DUMP_MIN);
        clamp.setPosition(CLAMP_MIN);
        */
        //gets servos and sets to minimum values
    }

    @Override
    public void loop() {
        getJoyVals();
        //updates joyvalues with deadzones, xyzw
        //sets the power of Chris if a on functions is pressed
        //if (gamepad2.a) chris.setPower(.1);
        //allows control of harvester

        //if (gamepad.x) {
            //eric.setPower(1);
       // }

        //if (gamepad2.x) toby.setPower(-.1);


        /* //servo controller for the flag
        if(gamepad2.dpad_up) mochi.setPosition(1.0);
        if(gamepad2.dpad_right)  mochi.setPosition(0.5);
        if(gamepad2.dpad_down)  mochi.setPosition(0);

         */
        fudge = leftY; //this can be tweaked for exponential power increase
        //Louis = frontRight
        louis.setPower(Range.clip(fudge - leftX+rightX, -1, 1));
        //maria = rearLeft
        maria.setPower(Range.clip(fudge - leftX-rightX, -1, 1));
        //Parker = frontLeft
        parker.setPower(Range.clip(fudge + leftX-rightX, -1, 1));
        //matthew = rearRight
        matthew.setPower(Range.clip(fudge + leftX+rightX, -1, 1));



        //toby pushes to the left by hitting left trigger/left bumper?
        //toby pushes to the right by hitting right trigger/right bumper?
        toby.setPower(-((gamepad2.left_trigger>0.5)? -1:(gamepad2.left_bumper)? 1:0));
        toby.setPower((gamepad2.right_trigger>0.5)? -1:(gamepad2.right_bumper)? 1:0);

/*
        if(gamepad1.right_bumper) dump.setPosition(DUMP_MIN);
        if(gamepad1.right_trigger>0.5) dump.setPosition(DUMP_MAX);
        //allows control of dump servos

        if(gamepad1.a) clamp.setPosition(CLAMP_MIN);
        if(gamepad1.y) clamp.setPosition(CLAMP_MID);
        if(gamepad1.x) clamp.setPosition(CLAMP_MAX);
        //allows control of clamp servos
        */
    }

    public void getJoyVals()
    {
        leftY = gamepad1.left_stick_y;
        leftX = gamepad1.left_stick_x;
        //formally z
        rightX = gamepad1.right_stick_x;
        //formally w
        rightY = gamepad1.right_stick_y;
        //updates joystick values

        //deadzones are the area that controllers don't work as none are calibrated perfectly, this checks for them
        if(Math.abs(leftX)<deadzone) leftX = 0;
        if(Math.abs(leftY)<deadzone) leftY = 0;
        if(Math.abs(rightX)<deadzone) rightX = 0;
        if(Math.abs(rightY)<0.9) rightY = 0;
        //checks deadzones
    }


    @Override
    public void stop() {
        //nothing here? probably gotta call garbage collection at some point
        parker.setPower(0);
        louis.setPower(0);
        matthew.setPower(0);
        maria.setPower(0);
        toby.setPower(0);
       // mochi.setPower(0.5);
        //eric.setPower(0);
        //chirs.setPower(0);
    }
}
