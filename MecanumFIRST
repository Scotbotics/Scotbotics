//package that allows importing into the phone
package org.firstinspires.ftc.teamcode;

//import a lot of different functions, methods and commands for the ftc hardware
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.GyroSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotorController;
import android.media.MediaPlayer;

//import a few more things for android.os on the phones
import android.media.MediaRouter;
import android.os.Handler;
import android.os.SystemClock;
import android.util.Log;
import android.view.ViewParent;

/*
Created by Sam Orta on 10/1/16. Came from FTCkey template
Last edited 1/9/16
 */
//code where this program originally came from is http://ftckey.com/programming/tele-op/

public class MechanumFIRST extends OpMode {
    //Variables that define what the motors and servos are
    //yes I name the variables after people who have formerly been on the team
    //Reason is that I'm insane -Sam
    DcMotor parker, louis, maria, matthew, toby, eric, chris;
    Servo mochi;

    //variables for the joysticks and their positions on gamepad1
    public float leftX, leftY, rightX, rightY, fudge, harvesterY, trueFudge;

    //deadzones are attempts to counter the calibration errors on the joysticks and it from breaking completely
    public static double deadzone = 0.2;

    static final double COUNTS_PER_MOTOR_REV = 1220;    // eg: TETRIX Motor Encoder
    static final double DRIVE_GEAR_REDUCTION = 2.0;     // This is < 1.0 if geared UP
    static final double WHEEL_DIAMETER_INCHES = 4.0;     // For figuring circumference
    static final double COUNTS_PER_INCH = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) / (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double DRIVE_SPEED = 1.0;
    static final double TURN_SPEED = 0.5;

    //inches forward is 229 * n inches
    int TobyMoveLeft = -500;
    int TobyMoveRight = 500;

    public ElapsedTime runtime = new ElapsedTime();

    MediaPlayer ScotlandTheBrave, HowCouldThisHappen, TheSoundOfSilence, EyeOfTheTiger, RockyTheme;
    MediaPlayer OverwatchTheme, ProtectorsOfTheEarth, Victory, LetItGoAirhorn, Thunderstuck;

    //initialize stage in which everything is set up and prepared
    @Override
    public void init() {
        //list of the all the motors and connect themselves to the actual motors
        //the things in parantheses ex. "frontLeft" are what the motors are named in the configuration on the robot controller phone
        parker = hardwareMap.dcMotor.get("frontLeft");
        louis = hardwareMap.dcMotor.get("frontRight");
        maria = hardwareMap.dcMotor.get("rearLeft");
        matthew = hardwareMap.dcMotor.get("rearRight");

        mochi = hardwareMap.servo.get("flagRaiser");

        eric = hardwareMap.dcMotor.get("catapult");
        toby = hardwareMap.dcMotor.get("buttonPusher");
        chris = hardwareMap.dcMotor.get("harvester");

        //reverses left side, so the robot can drive other directions
        parker.setDirection(DcMotor.Direction.REVERSE);
        maria.setDirection(DcMotor.Direction.REVERSE);

        toby.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        //set up out playlist
        HowCouldThisHappen = MediaPlayer.create(hardwareMap.appContext, R.raw.howcouldthishappentome);
        ScotlandTheBrave = MediaPlayer.create(hardwareMap.appContext, R.raw.scotlandthebrave);
        TheSoundOfSilence = MediaPlayer.create(hardwareMap.appContext, R.raw.thesoundofsilence);
        EyeOfTheTiger = MediaPlayer.create(hardwareMap.appContext, R.raw.eyeofthetiger);
        RockyTheme = MediaPlayer.create(hardwareMap.appContext, R.raw.rockytheme);
        OverwatchTheme = MediaPlayer.create(hardwareMap.appContext, R.raw.overwatchtheme);
        ProtectorsOfTheEarth = MediaPlayer.create(hardwareMap.appContext, R.raw.protectorsoftheearth);
        Victory = MediaPlayer.create(hardwareMap.appContext, R.raw.victory);
        LetItGoAirhorn = MediaPlayer.create(hardwareMap.appContext, R.raw.letitgoairhorn);
        Thunderstuck = MediaPlayer.create(hardwareMap.appContext, R.raw.thunderstruck);




    }

    @Override
    public void loop() {
        getJoyVals();
        //updates joyvalues with deadzones, xyzw

        telemetry.addData("Maria", "Power: " + maria.getPower());
        telemetry.addData("Matthew", "Power: " + matthew.getPower());
        telemetry.addData("Louis", "Power: " + louis.getPower());
        telemetry.addData("Parker", "Power: " + parker.getPower());

        telemetry.update();
        //allows control of harvester
        chris.setPower(harvesterY * trueFudge);

        //Turns the ball launcher on
        if(gamepad2.x) {
            eric.setPower(-1);
        }

        //Turns the ball launcher off
        if(gamepad2.b) {
            eric.setPower(0);
        }

        //Raises the flag
        if(gamepad2.dpad_up) {
            mochi.setPosition(1.0);
        }

        //Stops the flag
        if(gamepad2.dpad_left) {
            mochi.setPosition(0.5);
        }

        //Lowers the flag
        if(gamepad2.dpad_down) {
            mochi.setPosition(0);
        }
        /*
        if(gamepad2.left_bumper) {
            toby.setTargetPosition(TobyMoveRight);
            // Turn On RUN_TO_POSITION
            toby.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            runtime.reset();
            toby.setPower(-1);

            // Turn off RUN_TO_POSITION
            toby.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
           // tobyReset(DRIVE_SPEED, 10, 1.0);
        }
        */
        /*
        if(gamepad2.right_bumper) {
            toby.setTargetPosition(TobyMoveLeft);
            // Turn On RUN_TO_POSITION
            toby.setPower(1);

            toby.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            runtime.reset();
            toby.setPower(1);

            toby.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            // tobyReset(DRIVE_SPEED, 10, 1.0);
        }
        */


        //this controls how the drive system works by calculating how the joysticks control the power of te robot.
        fudge = leftY ; //this can be tweaked for exponential power increase

        trueFudge = (float) 1; // CHANGED 10/21/16 BY AZUL AND ANDERS FOR MAKER FAIR

        //Louis = frontRight
        louis.setPower(Range.clip(trueFudge * (fudge - leftX+rightX), -1, 1));
        //maria = rearLeft
        maria.setPower(Range.clip(trueFudge * (fudge - leftX-rightX), -1, 1));
        //Parker = frontLeft
        parker.setPower(Range.clip(trueFudge * (fudge + leftX-rightX), -1, 1));
        //matthew = rearRight
        matthew.setPower(Range.clip(trueFudge * (fudge + leftX+rightX), -1, 1));

        //1 is right side for button pusher
        //-1 is left side for button pusher

        //toby pushes to the left by hitting left trigger
        //toby pushes to the right by hitting right trigger

        /*
        if(gamepad2.right_trigger > 0.5) {
            //toby.setTargetPosition(100);
            // Turn On RUN_TO_POSITION
            toby.setPower(1);
            /*
            toby.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            runtime.reset();

            // Turn off RUN_TO_POSITION
            toby.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            */
        //}

        /*
        if(gamepad2.left_trigger > 0.5) {
            //toby.setTargetPosition(-100);
            // Turn On RUN_TO_POSITION
            toby.setPower(-1);

            //toby.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            //runtime.reset();

            // Turn off RUN_TO_POSITION
            //toby.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        }
       */


        toby.setPower((((gamepad2.left_trigger>0.5)?  1:0)));
        toby.setPower((-((gamepad2.right_trigger>0.5)? 1:0)));

        //yes I programmed Scotland The Brave and How could this happen to Me into the robot
        if(gamepad1.y) {
            ScotlandTheBrave.start();
        }
        //If the song is playing, you can stop it
        if(gamepad1.dpad_up && ScotlandTheBrave.isPlaying()) {
            ScotlandTheBrave.pause();
        }

        //How to start "How did this happen". Use when losing or everything is breaking
        if(gamepad1.x) {
            RockyTheme.start();
        }

        //If the song is playing, you can stop it
        if(gamepad1.dpad_left && RockyTheme.isPlaying()) {
            RockyTheme.pause();
        }

        //Use when wanting to listen to a good song, or everything is broken
        if(gamepad1.b) {
            ProtectorsOfTheEarth.start();
        }

        //If the song is playing, you can stop it
        if(gamepad1.dpad_right && ProtectorsOfTheEarth.isPlaying()) {
            ProtectorsOfTheEarth.pause();
        }

        if(gamepad1.a) {
            //LetItGoAirhorn.start();
            maria.setPower(0.5);
            matthew.setPower(0.5);
            louis.setPower(0.5);
            parker.setPower(0.5);

        }
        if(gamepad1.dpad_down && LetItGoAirhorn.isPlaying()) {
            LetItGoAirhorn.pause();
            maria.setPower(0);
            matthew.setPower(0);
            louis.setPower(0);
            parker.setPower(0);
        }
    }

    public void getJoyVals()
    {
        //how the joystick variables are connected to the joysticks
        leftY = gamepad1.left_stick_y;
        leftX = gamepad1.left_stick_x;
        //formally z
        rightX = gamepad1.right_stick_x;
        //formally w
        rightY = gamepad1.right_stick_y;
        //updates joystick values
        harvesterY = gamepad2.left_stick_y;

        //deadzones are the area that controllers don't work as none are calibrated perfectly, this checks for them
        if(Math.abs(leftX)<deadzone) leftX = 0;
        if(Math.abs(leftY)<deadzone) leftY = 0;
        if(Math.abs(rightX)<deadzone) rightX = 0;
        if(Math.abs(rightY)<0.9) rightY = 0;
        //checks deadzones
    }



    @Override
    public void stop() {
        //nothing here? probably gotta call garbage collection at some point
        //tells everything to cut all power
        //All motors go to 0 power when cut, servos stop moving at 0.5 power (Mochi)
        parker.setPower(0);
        louis.setPower(0);
        matthew.setPower(0);
        maria.setPower(0);
        toby.setPower(0);
        mochi.setPosition(0.5);
        eric.setPower(0);
        chris.setPower(0);
    }
}
